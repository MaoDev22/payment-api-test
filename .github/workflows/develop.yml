name: Develop CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  check-conditions:
    runs-on: self-hosted
    outputs:
      condition: ${{ steps.set-condition.outputs.condition }}
    steps:
    - name: Set condition
      id: set-condition
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ github.base_ref }}" == "develop" ]; then
          echo "condition=true" >> $GITHUB_ENV
          echo "::set-output name=condition::true"
        else
          echo "condition=false" >> $GITHUB_ENV
          echo "::set-output name=condition::false"
        fi
  build:
    needs: check-conditions
    if: needs.check-conditions.outputs.condition == 'true'
    runs-on: self-hosted
    
    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install packages
      run: npm ci --no-audit --no-fund --no-optional

    - name: Build project
      # if: success()
      run: npm run build --if-present

  test:
    needs: [check-conditions, build]
    if: needs.check-conditions.outputs.condition == 'true'
    runs-on: self-hosted
    
    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - name: Run test
      run: npm test

  coverage:
    needs: [check-conditions, test]
    runs-on: self-hosted
    
    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - name: Get changed files
      id: changed-files
      run: |
          if ${{ github.event_name == 'pull_request' }}; then
              echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
          else
              echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
          fi

    - name: List changed files
      run: |
          for file in ${{ steps.changed-files.outputs.changed_files }}; do
              echo "$file was changed"
          done

    - name: Generate test coverage for changed files
      run: |
        changed_files="${{ steps.changed-files.outputs.changed_files }}"
        if [ -n "$changed_files" ]; then
          # Convert the list to a space-separated string
          changed_files_list=$(echo "$changed_files" | tr '\n' ' ')
          # Run Jest with the list of changed files
          jest --coverage --findRelatedTests $changed_files_list --passWithNoTests
        else
          echo "No files have changed, skipping tests."
        fi
